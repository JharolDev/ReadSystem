name: Snyk Security Check

on:
  workflow_dispatch:  # Permite la ejecución manual
  push:
    branches:
      - main
      - integration
      - laboratory
  pull_request:
    branches:
      - main
      - integration
      - laboratory
    types: [opened, synchronize]

jobs:
  security-check:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      pull-requests: write
      contents: write
      checks: write
      statuses: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.4.1'  # Versión actualizada de Node.js

      - name: Verify Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker Image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        run: |
          docker build --no-cache -t test-image .

      - name: Run Snyk Container Check
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: test-image
          args: --sarif-file-output=snyk-container.sarif --severity-threshold=high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-code.sarif --severity-threshold=high

      - name: Merge SARIF files
        if: always()
        run: |
          echo '[' > snyk.sarif
          if [ -f "snyk-container.sarif" ]; then
            cat snyk-container.sarif | sed '1d;$d' >> snyk.sarif
          fi
          if [ -f "snyk-code.sarif" ]; then
            if [ -f "snyk-container.sarif" ]; then
              echo ',' >> snyk.sarif
            fi
            cat snyk-code.sarif | sed '1d;$d' >> snyk.sarif
          fi
          echo ']' >> snyk.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3  # Actualizado a v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Create Security Report
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            let conclusion = 'success';
            let summary = '### 🔒 Reporte de Seguridad\n\n';
            
            try {
              if (fs.existsSync('snyk-container.sarif')) {
                const containerResults = JSON.parse(fs.readFileSync('snyk-container.sarif', 'utf8'));
                const containerVulns = containerResults.runs[0]?.results?.length || 0;
                summary += `#### 🐳 Vulnerabilidades en Contenedor\n- Total encontradas: ${containerVulns}\n\n`;
                if (containerVulns > 0) conclusion = 'failure';
              }
              
              if (fs.existsSync('snyk-code.sarif')) {
                const codeResults = JSON.parse(fs.readFileSync('snyk-code.sarif', 'utf8'));
                const codeVulns = codeResults.runs[0]?.results?.length || 0;
                summary += `#### 📦 Vulnerabilidades en Dependencias\n- Total encontradas: ${codeVulns}\n\n`;
                if (codeVulns > 0) conclusion = 'failure';
              }
            } catch (e) {
              summary += '⚠️ Error al procesar resultados del análisis\n';
              conclusion = 'failure';
            }
            
            const check = {
              name: 'Snyk Security Analysis',
              head_sha: context.payload.pull_request?.head.sha || context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: 'Análisis de Seguridad',
                summary: summary
              }
            };
            
            await github.rest.checks.create({
              ...context.repo,
              ...check
            });
