name: CI/CD Pipeline with Trivy

on:
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Obtener el nombre de la imagen desde el Dockerfile
      - name: Get Docker Image Name
        id: get-image-name
        run: |
          IMAGE_NAME=$(awk '$1 == "FROM" { print $2; exit }' Dockerfile)
          echo "::set-output name=image-name::$IMAGE_NAME"

      # Construir la imagen Docker usando el Dockerfile del repositorio
      - name: Build Docker Image
        run: docker build -t myapp-node:14 .

      # Instalar Trivy CLI
      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ./bin

      # Escanear la imagen Docker con Trivy
      - name: Scan Docker Image with Trivy
        id: trivy-scan
        run: |
          ./bin/trivy image myapp-node:14 --severity HIGH,MEDIUM,LOW --ignore-unfixed --format json --output docker-image-vul.json

      # Mostrar los resultados del escaneo si es necesario
      - name: Show Trivy Scan Results
        run: |
          cat docker-image-vul.json

      # Verificar vulnerabilidades encontradas
      - name: Check for Vulnerabilities
        id: vulnerabilities-check
        continue-on-error: true  # Continuar incluso si hay un error en este paso
        run: |
          # Capturar la cantidad de vulnerabilidades
          VULNERABILITIES=$(jq -r '.Vulnerabilities | length' docker-image-vul.json || echo "0")
          echo "Number of vulnerabilities found: $VULNERABILITIES"
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "Vulnerabilities found in the Docker image:"
            jq -r '.Vulnerabilities[] | "  * \(.VulnerabilityID): \(.PkgName) (\(.InstalledVersion))"' docker-image-vul.json
            echo "::set-output name=vulnerabilities-found::true"
          else
            echo "No vulnerabilities found in the Docker image."
            echo "::set-output name=vulnerabilities-found::false"
          fi

      # Etiquetar la imagen con la dirección del repositorio en Docker Hub
      - name: Tag and Push Docker Image to Docker Hub
        if: success()  # Solo proceder si el escaneo y la construcción fueron exitosos
        run: |
          docker tag myapp-node:14 jharol/myapp-node:14
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push jharol/myapp-node:14

      # Subir carpeta de reportes como artefacto final
      - name: Upload Reports Folder
        if: always()  # Subir siempre la carpeta de reportes
        uses: actions/upload-artifact@v2
        with:
          name: scan-reports
          path: reports

      # Mostrar advertencia si se encontraron vulnerabilidades
      - name: Display Vulnerabilities as Warning
        if: steps.vulnerabilities-check.outputs.vulnerabilities-found == 'true'
        run: |
          echo "::warning::Vulnerabilities were found in the Docker image. Review the scan report for details."
